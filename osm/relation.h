/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef RELATION_H
#define RELATION_H

#include "element.h" // inheriting class's header file
#include "member.h"
#include <list>
using namespace std;

#include "osm_exception.h"

/**
 * Classe définit un élément Relation tel que décrit dans l'API Osm.
 */
class Relation : public Element
{
    private:
// Liste des membres (Element & Role) de la relation.
        list<Member> fMembers;

/**
 * Affiche la description de l'instance sous la forme d'un flux XML.
 * @param aStream Le flux de sortie dans lequel se fait l'injection.
 * @return Le flux de sortie après injection.
 */
        ostream& afficherMembers(ostream& aStream) const;

    public:
/**
 * Constructeur par défaut de l'instance.
 */
        Relation() {}

/**
 * Permet d'ajouter un Member à la Relation.
 * @param aMember Membre à ajouter à la liste.
 */
        void addMember(const Member& aMember);

/// Nom de la classe utilisée par certaines méthodes templates de la classe ApiOsm.
        static const string NOM;

        ostream& afficher(ostream& aStream) const;

/**
 * Retourne la liste des Members de l'instance.
 * @return Une liste de Members.
 */
        const list<Member>& getMembers() const {  return fMembers; }

};

inline ostream& operator<<(ostream& aStream, const Relation& aRelation)
{ return aRelation.afficher(aStream); }

#endif // RELATION_H
