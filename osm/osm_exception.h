/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef OSM_EXCEPTION_H
#define OSM_EXCEPTION_H

#include <exception>
#include <sstream>
#include <string>
#include <iostream>

using namespace std;

/*
 * Classe de l'exception utilisée par cette API.
 */
class OsmException : public exception {
private:
     /// Contient le message préparé de l'exception.
     string fMessage;

public:
     /**
      * \brief Constructeur de l'instance.
      *
      * \param aMessage Texte décrivant la raison de la levée d'exception.
      * \param aFichier Le fichier où s'est produite l'exception (__FILE__).
      * \param aLine La numéro de la ligne où s'est produite l'exception
      *              (__LINE__).
      * \param aFonction La fonction ou méthode où s'est produite l'exception
      *                  (__PRETTY_FUNCTION__).
      */
     inline OsmException(const string& aMessage,
                         const string& aFichier,
                         const unsigned aLine,
                         const string& aFonction) :
          fMessage() {
          ostringstream oss;
          oss << "Exception OSM : " << aMessage
          << " dans " << aFichier << ":"
          << aLine << " ("
          << aFonction << ")";
          fMessage = oss.str();
     }

     /**
      * Destructeur virtuel de l'instance, sans action.
      */
     virtual ~OsmException() throw()  {}

     /**
      * Retourne La description complète de l'exception.
      * \return Une chaîne de caractères contenant la description.
      */
     virtual const char* what() const throw() {
          return fMessage.c_str();
     }
};

/**
 * Classe décrivant l'exception utilisée dans le cas particulier de
 * requêtes HTTP.
 */
class HttpException : public OsmException {
private:
     /// Code de l'erreur HTTP.
     const unsigned fCode;

public:
     /**
      * Constructeur de l'instance.
      * \param aCode Numéro du code retour de la requête HTTP.
      * \param aMessage Texte décrivant la raison de la levée d'exception.
      * \param aFichier Le fichier où s'est produite l'exception (__FILE__).
      * \param aLine La numéro de la ligne où s'est produite l'exception
      *              (__LINE__).
      * \param aFonction La fonction ou méthode où s'est produite l'exception
      *                  (__PRETTY_FUNCTION__).
      */
     inline HttpException(const unsigned aCode,
                          const string& aMessage,
                          const string& aFichier,
                          const unsigned aLine,
                          const string& aFonction) :
          OsmException(aMessage, aFichier, aLine, aFonction),
          fCode(aCode)
     {}

     /**
      * Destructeur virtuel de l'instance, sans action.
      */
     virtual ~HttpException() throw()  {}

     /**
      * Indique le code de l'erreur.
      * \return Le code retour HTTP.
      */
     unsigned code() const {
          return fCode;
     }
};

#endif // EXCEPTION_H
