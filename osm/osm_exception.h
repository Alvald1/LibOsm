/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef OSM_EXCEPTION_H
#define OSM_EXCEPTION_H

#include <exception>
#include <sstream>
#include <string>
#include <iostream>

using namespace std;

/*
 * Classe de l'exception utilisée par cette API.
 */
class OsmException : public exception
{
    private:
        string fMessage;

    public:
        inline OsmException(const string& aMessage,
                            const string& aFichier,
                            const unsigned aLine,
                            const string& aFonction) :
            fMessage()
        {
            ostringstream oss;
            oss << "Exception OSM : " << aMessage
                << " dans " << aFichier << ":"
                << aLine << " ("
                << aFonction << ")";
            fMessage = oss.str();
        }

        virtual ~OsmException() throw()  {}

        virtual const char* what() const throw()
        {   return fMessage.c_str(); }
};

class HttpException : public OsmException
{
    private:
        const unsigned fCode;

    public:
        inline HttpException(const unsigned aCode,
                             const string& aMessage,
                             const string& aFichier,
                             const unsigned aLine,
                             const string& aFonction) :
            OsmException(aMessage, aFichier, aLine, aFonction),
            fCode(aCode)
        {}

        virtual ~HttpException() throw()  {}

        unsigned code() const { return fCode; }
};

#endif // EXCEPTION_H
