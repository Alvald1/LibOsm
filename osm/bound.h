/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef BOUND_H
#define BOUND_H

#include "point.h"

/**
 * Cette classe permet de gérer le rectangle circonscrit d'un élement.
 */
class Bound
{
    private:
        Point fMin;
        Point fMax;

    public:
/**
 * Constructeur de l'instance. Initialise par défaut les limites du Bound.
 * @param aMin Une référence sur les coordonnées minimum du Bound.
 * @param aMax Une référence sur les coordonnées maximum du Bound.
 */
        Bound(const Point& aMin,
              const Point& aMax) :
            fMin(aMin),
            fMax(aMax)
        {}

/**
 * Constructeur avec un seul Point. Dans ce cas, les limites sont égales au
 * Point indiqué.
 * @param aPoint Une référence sur un Point.
 */
        Bound(const Point& aPoint = Point()) :
            fMin(aPoint),
            fMax(aPoint)
        {}

/**
 * Modifie les limites du rectangle circonscrit en fonction du Point transmis.
 * @param aPoint Une référence sur le point à intégrer dans le rectangle.
 */
        void elargir(const Point& aPoint) {

            if (aPoint.longitude() < fMin.longitude())
                fMin.longitude(aPoint.longitude());
            else
                if (aPoint.longitude() > fMax.longitude())
                    fMax.longitude(aPoint.longitude());

            if (aPoint.latitude() < fMin.latitude())
                fMin.latitude(aPoint.latitude());
            else
                if (aPoint.latitude() > fMax.latitude())
                    fMax.latitude(aPoint.latitude());
        }

/**
 * Accesseur à la limite Est.
 * @return La valeur de la limite Est.
 */
        const double& est() const { return fMax.longitude(); }

/**
 * Accesseur à la limite Ouest.
 * @return La valeur de la limite Ouest.
 */
        const double& ouest() const { return fMin.longitude(); }

/**
 * Accesseur à la limite Nord.
 * @return La valeur de la limite Nord.
 */
        const double& nord() const { return fMax.latitude(); }

/**
 * Accesseur à la limite Sud.
 * @return La valeur de la limite Sud.
 */
        const double& sud() const { return fMin.latitude(); }


};


#endif // BOUND_H
