/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#include "member.h" // class's header file
#include <sstream>
#include "osm_exception.h"
#include <cassert>

using namespace std;

Member::Member(const TypeElement& aTypeElement,
               const unsigned long& aIdElement,
               const string& aRole) :
    fTypeElement(aTypeElement),
    fIdElement(aIdElement),
    fRole(aRole)
{}

/// \pre aKey non vide.
void Member::setAttribut(const string& aKey, const string& aValue)
{
    assert(!aKey.empty());
    istringstream iss(aValue);
    if (aKey == "type") {
        if (aValue == "node") fTypeElement = NODE;
        else if (aValue == "way") fTypeElement = WAY;
        else if (aValue == "relation") fTypeElement = RELATION;
        else throw OsmException(string("Type de Membre inconnu (" + aValue + ")"),
                                __FILE__, __LINE__, __PRETTY_FUNCTION__);
    }
    else if (aKey == "ref") iss >> fIdElement;
    else if (aKey == "role") iss >> fRole;
    else
        throw OsmException(string("Attribut " + aKey + "inconnu"),
                           __FILE__, __LINE__, __PRETTY_FUNCTION__);
}

ostream& Member::afficher(ostream& aStream) const
{
    aStream << "\t\t<member type=\"";
    switch (fTypeElement) {
        case NODE : aStream << "node";
                    break;
        case WAY : aStream << "way";
                   break;
        case RELATION : aStream << "relation";
                        break;
        default :
            throw OsmException("TypeElement inconnu",
                               __FILE__, __LINE__, __PRETTY_FUNCTION__);
    }
    return aStream << "\" ref=\"" << fIdElement
                   << "\" role=\"" << fRole << "\" />";
}
