/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef WAY_H
#define WAY_H

#include "element.h" // inheriting class's header file
#include <list>
#include "bound.h"
#include "node.h"

using namespace std;

// Déclaration anticipée.
// class OsmSqlite3;

/**
 * Classe définissant un Way composé d'identifiants de Node.
 */
class Way : public Element
{
    private:
//        friend class OsmSqlite3;

    public:
/// Définition du type de la liste de Nodes.
/// @see fNodes
        typedef list<unsigned long> ListeNodes;

    protected:
/// Liste des identifiants des Nodes composant l'instance.
        ListeNodes fNodes;

/// Définition du rectangle circonscrit (bound)
//        Bound fBound;

    public:
/**
 * Constructeur de l'instance.
 */
        Way() {}

//        void setBound(const Bound& aBound) { fBound = aBound; }

//        const Bound& getBound() const { return fBound; }

/**
 * Affiche la liste des identifiants des Nodes sous la forme d'une séquence XML.
 * @param aStream Un flux de sortie dans lequel la séquence est injectée.
 * @return Le flux de sortie après injection.
 */
        ostream& afficherNodes(ostream& aStream) const;

/**
 * Ajoute un identifiant à la fin de la liste.
 * @param aNode Une référence sur le Node à ajouter. Ce n'est pas le Node
 *              lui-même qui est ajouté, mais seulement son Id et ses
 *              coordonnées qui sont utilisées pour calculer le Bound du Way.
 */
//        void addNode(const Node& aNode);
        void addNode(const unsigned long& aNode);

/**
 * Retourne la liste des identifiants de Node.
 * @return Une référence sur la liste des identifiant de Nodes.
 */
        const ListeNodes& nodes() const { return fNodes; }

/// Nom de la classe utilisée par certaines méthodes templates de la classe ApiOsm.
        static const string NOM;

/**
 * Opérateur de comparaison de l'instance courante avec un Way.
 * Il indique si les deux Way sont identiques sur tous leurs attributs, Tags, et
 * Nodes.
 * @param aWay Une référence sur un Way (ça peut être le même).
 * @return true si les deux Ways sont identiques, false sinon.
 * @see operator!=().
 */
        bool operator==(const Way& aWay) const;

/**
 * Opérateur de comparaison de l'instance courante avec un Way.
 * Il indique si les deux Way sont identiques sur tous leurs attributs, Tags, et
 * Nodes.
 * @param aWay Une référence sur un Way (ça peut être le même).
 * @return false si les deux Ways sont identiques, true sinon.
 * @see operator==().
 */
        inline bool operator!=(const Way& aWay) const { return !(*this == aWay); }

};

/**
 * Opérateur d'injection d'un Way dans un flux de sortie.
 * @param aStream Le flux de sortie dans lequel est injecté la description.
 * @param aWay L'instance de Way qui sera injectée.
 * @return Le flux de sortie après injection.
 */
ostream& operator<<(ostream& aStream, const Way& aWay);

#endif // WAY_H
