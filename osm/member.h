/*
    Copyright © 2010 par Marc Sibert

    This file is part of LIBOSM

    LIBOSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LIBOSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with LIBOSM.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \author Marc Sibert
 */

// Class automatically generated by Dev-C++ New Class wizard

#ifndef MEMBER_H
#define MEMBER_H

#include <string>

using namespace std;

/**
 * Member est un des composants d'une Relation.
 * Cela peut être n'importe quel élément auquel on attribue un rôle.
 */
class Member
{
    public:
        typedef enum {
            NONE = 0,   ///< Sans élément associé (à l'initilisation seulement).
            NODE,       ///< L'élément associé est un Node.
            WAY,        ///< L'élément associé est une Way.
            RELATION    ///< L'élément associé est une Relation.
        } TypeElement;

    private:
/// Type de l'Élément associé.
        TypeElement fTypeElement;

/// Identifiant de l'Élément associé.
        unsigned long fIdElement;

/// Rôle de l'Élément associé.
        string fRole;

	public:
/**
 * Constructeur de l'instance.
 * @param aTypeElement Type de l'élément composant la Relation.
 * @param aIdElement Identifiant de l'élément.
 * @param aRole Description du rôle donné à l'élément.
 */
        Member(const TypeElement& aTypeElement = NONE,
               const unsigned long& aIdElement = 0,
               const string& aRole = "");

/**
 * Destructeur de l'instance. Sans action.
 */
		~Member() {};

/**
 * Définit l'un des attributs d'un Membre.
 * @param aKey Nom de l'attribut.
 * @param aValue Valeur à attribuer.
 * @throw OsmException si l'attribut est inconnu ou la valeur erronée.
 */
		void setAttribut(const string& aKey, const string& aValue);

/**
 * Injecte la description de l'instance dand le flux de sortie indiqué.
 * @param aStream Le flux de sortie.
 * @return Le flux de sortie après injection.
 */
        ostream& afficher(ostream& aStream) const;

/**
 * Retourne le type de l'instance.
 * \return Une référence constante sur le type de l'instance.
 * \see TypeElement.
 */
        const TypeElement& getType() const { return fTypeElement; }

/**
 * Retourne l'identifiant (id) de l'instance.
 * \return Une référence constante sur l'identifiant de l'instance.
 */
        const unsigned long&  getId() const { return fIdElement; }

/**
 * Retourne le rôle attribué à l'instance.
 * \return Une référence constante sur la chaîne décrivant le rôle de l'instance.
 */
        const string& getRole() const { return fRole; }

};

/**
 * Injecte un membre dans un flux de sortie.
 * @param aStream Le flux de sortie.
 * @param aMember Le membre à injecter.
 * @return Le flux de sortie après injection.
 */
inline ostream& operator<<(ostream& aStream, const Member& aMember)
{ return aMember.afficher(aStream); }

#endif // MEMBER_H
